// Code generated by MockGen. DO NOT EDIT.
// Source: auth.go

// Package mock_auth is a generated GoMock package.
package usecase

import (
	user "redditapp/pkg/user"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAuthInterface is a mock of AuthInterface interface.
type MockAuthInterface struct {
	ctrl     *gomock.Controller
	recorder *MockAuthInterfaceMockRecorder
}

// MockAuthInterfaceMockRecorder is the mock recorder for MockAuthInterface.
type MockAuthInterfaceMockRecorder struct {
	mock *MockAuthInterface
}

// NewMockAuthInterface creates a new mock instance.
func NewMockAuthInterface(ctrl *gomock.Controller) *MockAuthInterface {
	mock := &MockAuthInterface{ctrl: ctrl}
	mock.recorder = &MockAuthInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthInterface) EXPECT() *MockAuthInterfaceMockRecorder {
	return m.recorder
}

// Check mocks base method.
func (m *MockAuthInterface) Check(arg0 string) (*user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Check", arg0)
	ret0, _ := ret[0].(*user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Check indicates an expected call of Check.
func (mr *MockAuthInterfaceMockRecorder) Check(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Check", reflect.TypeOf((*MockAuthInterface)(nil).Check), arg0)
}

// SignIn mocks base method.
func (m *MockAuthInterface) SignIn(username, password string) (*AuthResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignIn", username, password)
	ret0, _ := ret[0].(*AuthResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignIn indicates an expected call of SignIn.
func (mr *MockAuthInterfaceMockRecorder) SignIn(username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignIn", reflect.TypeOf((*MockAuthInterface)(nil).SignIn), username, password)
}

// SignUp mocks base method.
func (m *MockAuthInterface) SignUp(username, password string) (*AuthResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignUp", username, password)
	ret0, _ := ret[0].(*AuthResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignUp indicates an expected call of SignUp.
func (mr *MockAuthInterfaceMockRecorder) SignUp(username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUp", reflect.TypeOf((*MockAuthInterface)(nil).SignUp), username, password)
}
